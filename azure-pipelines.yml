# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  batch: true
  branches:
    include:
    - refs/tags/*
    - franklin-dockerfile
  paths:
    exclude:
    - README.md

pr: none

##Use self hosted build server. Resource ID: resourceGroups/devcommon/providers/Microsoft.Compute/virtualMachines/Ubuntu16BuildServer
pool:
  name: Creditcoin
  demands:
   - agent.name -equals Ubuntu16BuildServer

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'f5aa2da0-fdf0-4f31-b77d-6b7c374f51e6'
  imageRepository: 'cc-substrate/testnet'
  containerRegistry: 'ccacrtest.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  registryName: 'ccacrtest'
  DOCKER_BUILDKIT: 1

stages:
- stage: Build_CI_Image
  displayName: Build and Push CI Image
  jobs:
  - job: CheckChanges
    displayName: CI File Changes
    steps:
    - bash: |
        FILE_FILTER="./ci-build.Dockerfile"
        CHANGED_FILES=$(git diff HEAD HEAD~ --name-only)
        COUNT=0

        echo "Checking for file changes in ci_build.Dockerfile..."
        for FILE in $CHANGED_FILES
        do
          if [[ $FILE == *$FILE_FILTER* ]]; then
            echo "MATCH:  ${FILE} changed"
            COUNT=$(($COUNT+1))
          else
            echo "IGNORE: ${FILE} changed"
          fi
        done

        echo "$COUNT match(es) for filter '$FILE_FILTER' found."
        if [[ $COUNT -gt 0 ]]; then
          echo "##vso[task.setvariable variable=CI_DOCKERFILE_CHANGED;isOutput=true]true"
        else
          echo "##vso[task.setvariable variable=CI_DOCKERFILE_CHANGED;isOutput=true]false"
        fi
      name: check_changes
      displayName: Check changed files

  - job: Build_CI
    displayName: Build_CI_Image
    dependsOn: CheckChanges
    condition: eq(dependencies.CheckChanges.outputs['check_changes.CI_DOCKERFILE_CHANGED'], 'true')
    steps:
    - task: Docker@2
      displayName: Docker Login
      inputs:
        containerRegistry: $(registryName)
        command: login

    #Build second stage in Dockerfile, caches from previously :builder.
    - task: Docker@2
      displayName: Build Image
      inputs:
        containerRegistry: $(registryName)
        repository: 'creditcoin/ci-linux'
        command: build
        Dockerfile: '$(Build.SourcesDirectory)/ci-build.Dockerfile'
        tags: |
          production

    #Push Image to registry
    - task: Docker@2
      displayName: Push Image
      inputs:
        command: push
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: 'creditcoin/ci-linux'
        tags: |
          production

  - job: Build_IMAGE
    displayName: Build-Creditcoin-Image
    steps:
    - script: |
        # Determine the tag for the image: If it is a stable release (e.g 2.0.1),
        # tags will be 2.0.1,stable,latest. For release candidates (e.g 2.0.1-beta),
        # tags will be 2.0.2-beta,beta,latest.
        # export tag=$(git describe --tag)
        export tag="0.1.0-testpipeline"
        export ccTag=$(echo $tag | awk -F- '{print $2}')
        if [ -z "$ccTag" ] ; then
          echo "##vso[task.setvariable variable=gitTag;]$tag"
          echo "##vso[task.setvariable variable=ccTag;]stable"
          export tag=($tag,stable)
        else
          echo "##vso[task.setvariable variable=gitTag;]$tag"
          echo "##vso[task.setvariable variable=ccTag;]$ccTag"
          export tag=($tag,$ccTag)
        fi
        echo "Image tags are: $tag"
      displayName: Get Creditcoin Image Tags

    # - task: Docker@2
    #   displayName: Docker Login
    #   inputs:
    #     containerRegistry: $(registryName)
    #     command: login

    # #Build second stage in Dockerfile, caches from previously :builder.
    # - task: Docker@2
    #   displayName: Build Image
    #   inputs:
    #     containerRegistry: $(registryName)
    #     repository: $(imageRepository)
    #     command: build
    #     Dockerfile: $(dockerfilePath)
    #     tags: |
    #       latest
    #       $(gitTag)
    #       $(ccTag)

#     #Push Image to registry
#     - task: Docker@2
#       displayName: Push Image
#       inputs:
#         command: push
#         containerRegistry: $(dockerRegistryServiceConnection)
#         repository: $(imageRepository)
#         tags: |
#           latest
#           $(gitTag)
#           $(ccTag)
